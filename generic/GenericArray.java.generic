package HaralickComputer.core;

public class @NAME@ {
	private int numberOfDimensions;
	private int[] dimensions;
	private int[] offsets;
	private @TYPE@[] data;
	
	public @NAME@(int... dimensions) throws IllegalArgumentException {
		this.numberOfDimensions = dimensions.length;
		
		if(this.numberOfDimensions == 0) {
			throw new IllegalArgumentException("The dimension of a @NAME@ must be greater than 0.");
		}
		
		if(!validateSize(dimensions)) {
			throw new IllegalArgumentException("The dimensions of the @NAME@ are invalid.");
		}
		
		this.dimensions = dimensions;
		
		computeOffsets();
		
		this.data = new @TYPE@[offsets[this.numberOfDimensions]];
	}
	
	private boolean validDimension(int length) {
		return length == this.numberOfDimensions;
	}
	
	private boolean validateArray(int min, int... values) {
		for(int d : values) {
			if(d < min) {
				return false;
			}
		}
		return true;
	}
	
	private boolean validateSize(int... dimensions) {
		return validateArray(1, dimensions);
	}
	
	private boolean validateCoordinates(int... coordinates) {
		return validateArray(0, coordinates);
	}
	
	
	private void computeOffsets() {
		offsets = new int[this.numberOfDimensions + 1];
		offsets[0] = 1;
		
		for(int i = 0; i < this.numberOfDimensions; i++) {
			offsets[i+1] = offsets[i] * dimensions[i];
		}
	}
	
	private int getOffset(int... position) {
		int offset = 0;
		for(int i = 0; i < position.length; i++) {
			offset += position[i] * offsets[i];
		}
		
		return offset;
	}
	
	public @TYPE@ get(int... coordinates) /* throws IndexOutOfBoundsException */ {
		/*
		if(!( validDimension(coordinates.length) && validateCoordinates(coordinates) )) {
			throw new IndexOutOfBoundsException("Invalid coordinates.");
		}
		*/
		
		return this.data[getOffset(coordinates)];
	}
	
	public void set(@TYPE@ value, int... coordinates) /* throws IndexOutOfBoundsException */ {
		/*
		if(!( validDimension(coordinates.length) && validateCoordinates(coordinates) )) {
			throw new IndexOutOfBoundsException("Invalid coordinates.");
		}
		*/
		
		this.data[getOffset(coordinates)] = value;
	}
	
	public @NAME@ extractRegion(int... coordinates) /* throws IndexOutOfBoundsException */ {
		/*
		if((coordinates.length % 2 != 0)) {
			throw new IndexOutOfBoundsException("Invalid dimensions.");
		}
		
		if(!validDimension(coordinates.length << 1)) {
			throw new IndexOutOfBoundsException("Invalid dimensions.");
		}
		*/
		
		int[] begin = new int[this.numberOfDimensions];
		int[] end = new int[this.numberOfDimensions];
		
		for(int i = 0; i < this.numberOfDimensions; i++) {
			begin[i] = coordinates[i];
			end[i] = coordinates[this.numberOfDimensions + i];
		}
		
		/*
		if(validateCoordinates(begin)) {
			throw new IndexOutOfBoundsException("Invalid begin coordinates.");
		}
		if(validateCoordinates(end)) {
			throw new IndexOutOfBoundsException("Invalid begin coordinates.");
		}
		*/
		
		@NAME@ roi = new @NAME@();
		
		return roi;
	}
	
	public static void main(String[] args) {
		@NAME@ a = new @NAME@(4, 4, 4, 4);
		
		for(int i = 0; i < a.numberOfDimensions; ++i) {
			System.out.println(a.offsets[i]);
		}
	}
}
